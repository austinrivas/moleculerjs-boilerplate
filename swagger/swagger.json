{
  "info": {
    "title": "Pankod MoleculerJS Boilerplate",
    "version": "1.0.0",
    "description": "Moleculer JS Microservice Boilerplate with Typescript, TypeORM, CLI, Service Clients, Swagger, Jest, Docker, Eslint support and everything you will ever need to deploy rock solid projects.."
  },
  "host": "localhost:3000",
  "basePath": "/api",
  "swagger": "2.0",
  "paths": {
    "/attack/Fire": {
      "post": {
        "description": "Attacks to the planet with given weapon.",
        "tags": [
          "Attack Service"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/AttackPlanetParams"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/AttackResponse"
          },
          "404": {
            "$ref": "#/responses/EntityNotFound"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "5XX": {
            "$ref": "#/responses/UncaughtError"
          }
        }
      }
    },
    "/jwks/Get": {
      "get": {
        "description": "An endpoint that returns a valid jwks.",
        "tags": [
          "JWKS Service"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/JWKSResponse"
          },
          "501": {
            "$ref": "#/responses/NotImplementedError"
          },
          "5XX": {
            "$ref": "#/responses/UncaughtError"
          }
        }
      }
    },
    "/planet/Defend": {
      "post": {
        "description": "A planet defends an attack from a given weapon.",
        "tags": [
          "Planet Service"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/AttackPlanetParams"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DefendResponse"
          },
          "404": {
            "$ref": "#/responses/EntityNotFound"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "5XX": {
            "$ref": "#/responses/UncaughtError"
          }
        }
      }
    }
  },
  "definitions": {
    "ErrorEntityNotFound": {
      "type": "object",
      "required": [
        "name",
        "message",
        "code",
        "type"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "MoleculerError"
        },
        "message": {
          "type": "string",
          "example": "Resource can't be found with options: {\"where\":{\"name\":\"Pew Pew\"}}"
        },
        "code": {
          "type": "integer",
          "example": 404
        },
        "type": {
          "type": "string",
          "example": "Not Found"
        }
      }
    },
    "ErrorUnprocessableEntity": {
      "type": "object",
      "required": [
        "name",
        "message",
        "code",
        "type",
        "data"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "required"
        },
        "message": {
          "type": "string",
          "example": "Parameters validation error!"
        },
        "code": {
          "type": "integer",
          "example": 422
        },
        "type": {
          "type": "string",
          "example": "VALIDATION_ERROR"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ErrorUnprocessableEntityData"
          }
        }
      }
    },
    "ErrorUnprocessableEntityData": {
      "type": "object",
      "required": [
        "type",
        "message",
        "field",
        "nodeID",
        "action"
      ],
      "properties": {
        "type": {
          "type": "string",
          "example": "required"
        },
        "message": {
          "type": "string",
          "example": "The 'planetName' field is required."
        },
        "field": {
          "type": "string",
          "example": "planetName"
        },
        "nodeID": {
          "type": "string",
          "example": "asus-ubuntu-3505"
        },
        "action": {
          "type": "string",
          "example": "attack.Fire"
        }
      }
    },
    "ErrorNotImplemented": {
      "type": "object",
      "required": [
        "name",
        "message",
        "code"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "MoleculerError"
        },
        "message": {
          "type": "string",
          "example": "JWKS is not implemented on this server."
        },
        "code": {
          "type": "integer",
          "example": 501
        }
      }
    },
    "ErrorUncaught": {
      "type": "object",
      "required": [
        "name",
        "message",
        "code"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "MoleculerError"
        },
        "message": {
          "type": "string",
          "example": ""
        },
        "code": {
          "type": "integer",
          "example": 500
        }
      }
    },
    "AttackResponseBody": {
      "in": "body",
      "required": [
        "planetMessage",
        "weaponMessage"
      ],
      "properties": {
        "planetMessage": {
          "type": "string",
          "example": "Planet took 233 damage and has 87552 shield left."
        },
        "weaponMessage": {
          "type": "string",
          "example": "Death Star did 89 damage and left 986 ammo."
        }
      }
    },
    "JWKSResponseBody": {
      "type": "object",
      "required": [
        "keys"
      ],
      "properties": {
        "keys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JWK"
          }
        }
      }
    },
    "JWK": {
      "type": "object",
      "required": [
        "e",
        "n",
        "kty",
        "kid"
      ],
      "properties": {
        "e": {
          "type": "string",
          "description": "The exponent for the RSA public key.",
          "example": "AQAB"
        },
        "n": {
          "type": "string",
          "description": "The modulus for the RSA public key.",
          "example": "2I8AXk_HeToAVOwJEtK_JvvhXBOyiJiE8rIrED9p751M1VggaTTndi7IZjL7MQ_-GrYi-zDtXZUpuDp7joFI6ixe6MSG12LliDw34xLhmQA4rZbrj8KRDucBPvGgKJp_EoSfHnGp1jgV1U43Xe4oRQgaRnLjYXcYEeh0EZ7OmFTnEcwsNxxkTatiDYJxBiKz3gk-FD7KdiREyIBmHD3NGX2oK8LK9EsqYDkgPnRVejrqaezhn7mDhAwkBI4MayMlZG7ygMk-gsJNvtJa-XJpfxFYxA3J2rcBhBoOqrGjrhE0Yd17rQjI1F5vdy1lDopgHS7-BEDabQcJ9u3CCXcebQ"
        },
        "kty": {
          "type": "string",
          "description": "The family of cryptographic algorithms used with the key.",
          "example": "RSA"
        },
        "kid": {
          "type": "string",
          "description": "The unique identifier for the key.",
          "example": "dIPbFeRBudnKdeeinfgYG5AHNLPuRPegACK0CqLUwCc"
        }
      }
    },
    "DefendResponseBody": {
      "in": "body",
      "required": [
        "damage",
        "planetMessage"
      ],
      "properties": {
        "damage": {
          "type": "integer",
          "example": 119
        },
        "planetMessage": {
          "type": "string",
          "example": "Planet took 119 damage and has 86711 shield left."
        }
      }
    }
  },
  "responses": {
    "UnprocessableEntity": {
      "description": "The request could not be processed.",
      "headers": {
        "content-type": {
          "description": "The Content-Type entity header is used to indicate the media type of the resource.",
          "schema": {
            "type": "string",
            "example": "application/json; charset=utf-8"
          }
        }
      },
      "schema": {
        "$ref": "#/definitions/ErrorUnprocessableEntity"
      }
    },
    "EntityNotFound": {
      "description": "The requested entity could not be found.",
      "headers": {
        "content-type": {
          "description": "The Content-Type entity header is used to indicate the media type of the resource.",
          "schema": {
            "type": "string",
            "example": "application/json; charset=utf-8"
          }
        }
      },
      "schema": {
        "$ref": "#/definitions/ErrorEntityNotFound"
      }
    },
    "NotImplementedError": {
      "description": "The server tried to call a method that is not implemented.",
      "headers": {
        "content-type": {
          "description": "The Content-Type entity header is used to indicate the media type of the resource.",
          "schema": {
            "type": "string",
            "example": "application/json; charset=utf-8"
          }
        }
      },
      "schema": {
        "$ref": "#/definitions/ErrorNotImplemented"
      }
    },
    "UncaughtError": {
      "description": "The server encountered an unhandled error.",
      "headers": {
        "content-type": {
          "description": "The Content-Type entity header is used to indicate the media type of the resource.",
          "schema": {
            "type": "string",
            "example": "application/json; charset=utf-8"
          }
        }
      },
      "schema": {
        "$ref": "#/definitions/ErrorUncaught"
      }
    },
    "AttackResponse": {
      "description": "Ok",
      "headers": {
        "content-type": {
          "description": "The Content-Type entity header is used to indicate the media type of the resource.",
          "schema": {
            "type": "string",
            "example": "application/json; charset=utf-8"
          }
        },
        "content-length": {
          "description": "The Content-Length entity-header field indicates the size of the entity-body.",
          "schema": {
            "type": "integer",
            "example": 132
          }
        }
      },
      "schema": {
        "type": "object",
        "$ref": "#/definitions/AttackResponseBody"
      }
    },
    "JWKSResponse": {
      "description": "Ok",
      "headers": {
        "content-type": {
          "description": "The Content-Type entity header is used to indicate the media type of the resource.",
          "schema": {
            "type": "string",
            "example": "application/json; charset=utf-8"
          }
        },
        "content-length": {
          "description": "The Content-Length entity-header field indicates the size of the entity-body.",
          "schema": {
            "type": "integer",
            "example": 436
          }
        }
      },
      "schema": {
        "type": "object",
        "$ref": "#/definitions/JWKSResponseBody"
      }
    },
    "DefendResponse": {
      "description": "Ok",
      "headers": {
        "content-type": {
          "description": "The Content-Type entity header is used to indicate the media type of the resource.",
          "schema": {
            "type": "string",
            "example": "application/json; charset=utf-8"
          }
        },
        "content-length": {
          "description": "The Content-Length entity-header field indicates the size of the entity-body.",
          "schema": {
            "type": "integer",
            "example": 132
          }
        }
      },
      "schema": {
        "type": "object",
        "$ref": "#/definitions/DefendResponseBody"
      }
    }
  },
  "parameters": {
    "weaponName": {
      "type": "string",
      "name": "weaponName",
      "example": "Death Star",
      "description": "The weapon being used to attack."
    },
    "planetName": {
      "type": "string",
      "name": "planetName",
      "example": "Alderaan",
      "description": "The planet being attacked."
    },
    "AttackPlanetParams": {
      "in": "body",
      "name": "params",
      "required": [
        "weaponName",
        "planetName"
      ],
      "schema": {
        "type": "object",
        "properties": {
          "weaponName": {
            "$ref": "#/parameters/weaponName"
          },
          "planetName": {
            "$ref": "#/parameters/planetName"
          }
        }
      },
      "description": "The weapon being used and planet being attacked."
    }
  },
  "securityDefinitions": {},
  "tags": [
    {
      "name": "Attack Service",
      "description": "Attacks to the planet with given weapon."
    },
    {
      "name": "JWKS Service",
      "description": "Creates a JWK Store and returns a valid jwks."
    },
    {
      "name": "Planet Service",
      "description": "Planet defends an attack from a given weapon."
    }
  ]
}